# Task ID: 16
# Title: First-Time Setup and Onboarding Flow
# Status: done
# Dependencies: 1, 2, 3, 15
# Priority: high
# Description: Create the initial setup process to gather child information, configure permissions, and provide usage instructions.
# Details:
1. Create onboarding flow with Jetpack Compose:
```kotlin
@Composable
fun OnboardingFlow(viewModel: OnboardingViewModel, onComplete: () -> Unit) {
    val state by viewModel.state.collectAsState()
    
    NavHost(
        navController = rememberNavController(),
        startDestination = "welcome"
    ) {
        composable("welcome") { WelcomeScreen() }
        composable("permissions") { PermissionsScreen() }
        composable("child_info") { ChildInfoScreen() }
        composable("parent_pin") { ParentPinScreen() }
        composable("tutorial") { TutorialScreen(onComplete) }
    }
}
```

2. Implement permission request handling
3. Create child information collection form
4. Implement parent PIN setup with confirmation
5. Create interactive tutorial for app usage
6. Add first-time AI interaction to establish rapport

# Test Strategy:
Test onboarding flow navigation. Verify permission requests are handled correctly. Test form validation for child information. Verify PIN setup requires confirmation. Test tutorial completion tracking.

# Subtasks:
## 1. Design and implement welcome and permissions screens [done]
### Dependencies: None
### Description: Create the initial welcome screen that introduces the app and implement the permissions request screen to handle necessary system permissions.
### Details:
Implement WelcomeScreen() and PermissionsScreen() composables with animations using Lottie. The welcome screen should explain the app's purpose in child-friendly language. The permissions screen should request accessibility, overlay, and other required permissions with clear explanations of why each is needed. Use the Splash API for a smooth transition into the onboarding flow.
<info added on 2025-05-28T07:04:00.725Z>
When implementing the PermissionsScreen() composable, ensure proper handling of the accessibility service permission request. The accessibility service implementation must follow correct lifecycle management to prevent crashes:

1. Delay the SavedStateRegistryController creation until onServiceConnected()
2. Initialize the controller with proper lifecycle state transitions (CREATED → STARTED)
3. Perform controller attachment and state restoration at the appropriate lifecycle stage
4. Implement safety checks for early registry access before service connection

This is critical for preventing the "Restarter must be created only during owner's initialization stage" crash that occurs when users enable the accessibility service. The permissions screen should clearly explain that this permission is essential for the app's lock screen functionality.
</info added on 2025-05-28T07:04:00.725Z>
<info added on 2025-05-28T07:11:57.470Z>
## Final Fix for Accessibility Service Crash

The accessibility service crash has been completely resolved by removing SavedStateRegistry support, which is incompatible with AccessibilityService's lifecycle. The root cause was that SavedStateRegistryController is designed for Activities and Fragments, not Services.

### Implementation Changes:
1. Remove the SavedStateRegistryOwner interface from the service class declaration
2. Remove all SavedStateRegistryController code and related properties
3. Keep ViewModelStoreOwner and LifecycleOwner interfaces for Compose support
4. Maintain proper lifecycle state transitions (CREATED → STARTED)

### Updated Code Structure:
```kotlin
class MerlinAccessibilityService : AccessibilityService(), ViewModelStoreOwner, LifecycleOwner {
    // No SavedStateRegistry support - not needed for services
    
    override fun onServiceConnected() {
        lifecycleRegistry.currentState = Lifecycle.State.CREATED
        lifecycleRegistry.currentState = Lifecycle.State.STARTED
        // ... rest of initialization
    }
}
```

This approach ensures the accessibility service functions properly without crashes while maintaining all necessary functionality for Compose ViewModels and proper lifecycle management.
</info added on 2025-05-28T07:11:57.470Z>
<info added on 2025-05-28T07:16:13.492Z>
## ViewTreeLifecycleOwner Fix for Compose in Accessibility Service

After resolving the SavedStateRegistry issue, a new crash was identified related to Compose integration with the AccessibilityService:

```
java.lang.IllegalStateException: ViewTreeLifecycleOwner not found from ComposeView
at androidx.compose.ui.platform.WindowRecomposer_androidKt.createLifecycleAwareWindowRecomposer
```

The root cause was that the ComposeView in the AccessibilityService overlay lacked proper ViewTreeLifecycleOwner configuration, which is essential for Compose to function in overlay windows.

### Implementation Solution:
```kotlin
// Create ComposeView for the lock screen chat interface
overlayView = ComposeView(this).apply {
    // Set the lifecycle and viewmodel store owners for Compose
    setViewTreeLifecycleOwner(this@MerlinAccessibilityService)
    setViewTreeViewModelStoreOwner(this@MerlinAccessibilityService)
    
    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
    setContent {
        MerlinTheme {
            LockScreenChatOverlay(
                onDismiss = { hideLockScreen() }
            )
        }
    }
}
```

This fix ensures proper Compose integration with the AccessibilityService by explicitly setting the service as both the lifecycle and viewmodel store owner before setting content. This approach maintains the proper component hierarchy needed for Compose's internal mechanisms when operating in system overlay windows.
</info added on 2025-05-28T07:16:13.492Z>
<info added on 2025-05-28T07:20:31.533Z>
## SavedStateRegistryOwner Implementation for Compose in Accessibility Service

After fixing the ViewTreeLifecycleOwner issue, a new crash was identified related to Compose's requirement for SavedStateRegistryOwner:

```
java.lang.IllegalStateException: Composed into the View which doesn't propagateViewTreeSavedStateRegistryOwner!
at androidx.compose.ui.platform.AndroidComposeView.onAttachedToWindow
```

The solution requires re-implementing SavedStateRegistryOwner support in a service-compatible way:

### Implementation Solution:
```kotlin
class MerlinAccessibilityService : AccessibilityService(), 
    ViewModelStoreOwner, SavedStateRegistryOwner, LifecycleOwner {
    
    // Minimal SavedStateRegistry implementation for Compose compatibility
    private val savedStateRegistryController = SavedStateRegistryController.create(this)
    
    override val savedStateRegistry: SavedStateRegistry
        get() = savedStateRegistryController.savedStateRegistry
        
    override fun onServiceConnected() {
        lifecycleRegistry.currentState = Lifecycle.State.CREATED
        
        // Initialize SavedStateRegistry in a service-compatible way
        try {
            savedStateRegistryController.performRestore(null)
        } catch (e: Exception) {
            Log.w("MerlinAccessibilityService", "SavedStateRegistry restore failed, continuing without it", e)
        }
        
        lifecycleRegistry.currentState = Lifecycle.State.STARTED
        // ... rest of initialization
    }
}
```

When creating the ComposeView, all three required owners must be set:
```kotlin
overlayView = ComposeView(this).apply {
    setViewTreeLifecycleOwner(this@MerlinAccessibilityService)
    setViewTreeViewModelStoreOwner(this@MerlinAccessibilityService)
    setViewTreeSavedStateRegistryOwner(this@MerlinAccessibilityService)
    
    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
    // ... rest of setup
}
```

This approach provides the minimal SavedStateRegistry support required by Compose while avoiding the problematic `performAttach()` call that caused the original crash.
</info added on 2025-05-28T07:20:31.533Z>
<info added on 2025-05-28T07:24:40.343Z>
## LATEST FIX - LAZY INITIALIZATION FOR SAVEDSTATEREGISTRY

After implementing the previous SavedStateRegistryOwner solution, we encountered another crash:
```
java.lang.IllegalStateException: You can consumeRestoredStateForKey only after super.onCreate of corresponding component
at androidx.savedstate.SavedStateRegistry.consumeRestoredStateForKey
```

The root cause was a lifecycle timing issue: SavedStateRegistry expects `super.onCreate()` to be called first, but AccessibilityService doesn't have an equivalent lifecycle method.

### Final Implementation Solution:
```kotlin
class MerlinAccessibilityService : AccessibilityService(), 
    ViewModelStoreOwner, SavedStateRegistryOwner, LifecycleOwner {
    
    // SavedStateRegistry for Compose compatibility - initialized lazily
    private val savedStateRegistryController by lazy { 
        SavedStateRegistryController.create(this).apply {
            performAttach()
            performRestore(null)
        }
    }
    
    override val savedStateRegistry: SavedStateRegistry
        get() = savedStateRegistryController.savedStateRegistry
}
```

This lazy initialization approach:
1. Defers controller creation until `savedStateRegistry` is first accessed
2. Performs attachment and restoration as atomic operations after creation
3. Avoids lifecycle timing conflicts with the AccessibilityService
4. Provides the SavedStateRegistry interface required by Compose

When creating the ComposeView, all three required owners must still be set:
```kotlin
overlayView = ComposeView(this).apply {
    setViewTreeLifecycleOwner(this@MerlinAccessibilityService)
    setViewTreeViewModelStoreOwner(this@MerlinAccessibilityService)
    setViewTreeSavedStateRegistryOwner(this@MerlinAccessibilityService)
    
    setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
    // ... rest of setup
}
```

This approach should resolve the lifecycle timing issues while maintaining Compose compatibility in the AccessibilityService.
</info added on 2025-05-28T07:24:40.343Z>

## 2. Develop child information collection form [done]
### Dependencies: 16.1
### Description: Create a form to collect essential child information for profile creation with age-appropriate UI elements.
### Details:
Implement the ChildInfoScreen() composable with form fields for name, age, interests, and other relevant profile information. Use child-friendly input methods like sliders for age selection and visual options for interests. Store collected information in the OnboardingViewModel and validate inputs before allowing navigation to the next screen. Leverage the existing OnboardingViewModel.kt state management for data collection and validation.

## 3. Implement parent PIN setup with confirmation [done]
### Dependencies: 16.2
### Description: Create a secure PIN setup process for parents with confirmation to ensure they remember the PIN correctly.
### Details:
Implement the ParentPinScreen() composable with a numeric keypad for PIN entry, confirmation screen, and recovery options. Include visual feedback for PIN strength and matching. Utilize the existing secure hashing (SHA-256 + salt) implementation in OnboardingViewModel for PIN storage. Provide a way to reset the PIN if forgotten. Consider biometric authentication as an alternative where available.

## 4. Create interactive tutorial for app usage [done]
### Dependencies: 16.3
### Description: Develop an interactive tutorial that guides users through the main features of the app with demonstrations and practice opportunities.
### Details:
Implement the TutorialScreen() composable with step-by-step guidance through core app features. Use animations, tooltips, and guided interactions to demonstrate how to use each feature. Include progress indicators and allow users to skip or revisit tutorial sections. Ensure the tutorial is engaging for children while also informative for parents. Connect with the existing OnboardingFlow.kt navigation controller.

## 5. Implement first-time AI interaction for rapport building [done]
### Dependencies: 16.4
### Description: Create an engaging first conversation with the AI assistant to establish rapport with the child and personalize the experience.
### Details:
Add a final onboarding screen for AI introduction after the tutorial. Design a friendly AI character introduction with personalized greeting using the child's name from the profile. Implement simple conversation starters based on the child's interests. Utilize the existing encrypted SharedPreferences system in OnboardingViewModel to track onboarding completion and prevent showing the flow on subsequent app launches.

