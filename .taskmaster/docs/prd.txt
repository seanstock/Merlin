# Product Requirements Document: **Merlin – AI Learning Lock Screen**

**Version:** 3.3 (Final Hybrid Approach—OpenAI First, Local AI Preparedness)
**Author:** Sean Cook
**Target Platform:** Android 9+ Tablets — Fully Self-Contained App

---

## 0 Purpose

Merlin provides an educational lock-screen layer that requires children to complete AI-driven educational tasks or interactive games to unlock Android tablets. Built to leverage OpenAI primarily, the app is architected explicitly for future integration of a local onboard AI model.

---

## 1 Overview

Merlin serves as an AI-powered educational gateway, appearing immediately upon device wake. It presents personalized learning tasks or HTML/React-based games. Success unlocks rewards such as screen-time wallet seconds, badges, and XP points. A hidden, PIN-secured parent dashboard provides analytics and granular control over multiple child profiles.

---

## 2 Core Features

| ID   | Feature                                        | Specifications                                                                                                                                                                                                                                                                                                                                                                     |
| ---- | ---------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| F-1  | **Overlay Lock Layer**                         | - Use Android `AccessibilityService` and `SYSTEM_ALERT_WINDOW` to enforce fullscreen lock-screen overlays.<br>- Ensure overlay persistence after unlock, device wake (`ACTION_SCREEN_ON`), or state changes (`WINDOW_STATE_CHANGED`).                                                                                                                                              |
| F-2  | **AI Tutor**                                   | - Initially gathers child's name, age, gender, preferred language, and location upon first interaction.<br>- Integrates OpenAI API with function-calling capabilities, maintaining a rolling context of the last 20 interactions.                                                                                                                                                  |
| F-3  | **Games & Interactive Tasks**                  | - Utilize bundled React-based HTML games loaded via Android WebView.<br>- Games triggered by OpenAI via a function call (`launch_game`).<br>- JavaScript bridge captures results (`pass`/`fail`, `time_ms`) and sends to native SQLite DB.                                                                                                                                         |
| F-4  | **Screen-Time Economy & Gamification**         | - Award screen-time based on successful completion of tasks.<br>- Introduce badges and XP for motivation.<br>- Implement adaptive difficulty to maintain \~80% task accuracy over rolling performance windows.                                                                                                                                                                     |
| F-5  | **Parent Dashboard**                           | - Hidden access via a secure gesture or long-press, PIN authentication using Argon2id hashing.<br>- Supports multiple child profiles.<br>- Provides analytics visualization (MPAndroidChart), showing mastery levels, task success rates, usage patterns, badges, and XP progression.<br>- Offers settings customization per child via JSON stored securely in encrypted database. |
| F-6  | **Offline Resilience**                         | - Local fallback tasks from a bundled JSON (`assets/fallback_tasks.json`) are loaded if OpenAI API calls fail.<br>- Ensure seamless offline usage after initial installation.                                                                                                                                                                                                      |
| F-7  | **Interaction & Memory Logs**                  | - Record every significant AI-child interaction to a `memories` SQLite table.<br>- Maintain a complete interaction log (`chat_history`) for long-term analytics and personalized future sessions.                                                                                                                                                                                  |
| F-8  | **Accessibility Features**                     | - Full Text-to-Speech (TTS) for task instructions and feedback.<br>- Optional Speech-to-Text (STT) input for interactive tasks.<br>- High-contrast UI mode, scalable text, and RTL support.                                                                                                                                                                                        |
| F-9  | **Security & Integrity Measures**              | - Encrypted SQLite database via SQLCipher (AES-256-GCM) with keys stored in Android Keystore.<br>- Detect device root, Safe Mode, and ADB access, triggering immediate PIN re-lock.<br>- Limit WebView JavaScript interactions strictly to whitelisted origins.                                                                                                                    |
| F-10 | **Telemetry & Analytics** *(Optional, opt-in)* | - Capture and locally store interaction metrics: task latency, unlock success rates, abandonment rates.<br>- Generate optional weekly PDF reports for parental review (Apache PDFBox, delivered via Android ShareSheet).                                                                                                                                                           |
| F-11 | **Learning-as-a-Service**                      | - **Simple Service Interfaces**: Clean contracts for AI processing, content generation, and analytics that can be swapped from local SQLite to remote APIs later without code changes.<br>- **Local Implementation First**: Build everything locally in the app, design interfaces so a future developer can easily move specific functions to a server if needed.<br>- **No Over-Engineering**: Focus on completing the Android app quickly with clean separation between business logic and data sources. |

---

## 3 Data Model (SQLite via Room, encrypted)

* `child_profile`: name, age, gender, language, location.
* `task_history`: logs all task attempts and results.
* `game_history`: records game interactions and outcomes.
* `chat_history`: maintains last 20 message rolling window per child.
* `memories`: significant AI-child interactions for personalization.
* `subject_mastery`: tracks progress and adaptive difficulty per subject.
* `economy_state`: stores wallet balance, badges, XP, and streak data.
* `daily_usage_log`: daily screen-time tracking.
* `parent_settings`: configuration settings per child, securely stored as JSON.
* `device_state`: internal state management and crash counters.

---

## 4 AI Interaction Logic

**AI Context Template:**

```
You are Merlin, a friendly AI tutor for a {age}-year-old {gender} child located in {location}, speaking {preferred_language}. Your role is to offer engaging educational tasks or launch games, provide supportive feedback, and adjust task difficulty dynamically to achieve ~80% success rate.
```

**Function Call Structure:**

* `launch_game(game_id, level)` triggers HTML mini-games.

---

## 5 Games Implementation

* Built with React and bundled into the Android assets directory.
* Interacts via JavaScript-Android bridge (`MerlinGameBridge.done`).
* Example game: "shape\_match" (drag-and-drop game for ages 2-3).

---

## 6 Permissions Required

* `SYSTEM_ALERT_WINDOW`
* `FOREGROUND_SERVICE`
* Optional: `RECORD_AUDIO` for speech-based tasks.

---

## 7 Typical App Flow

1. Wake event triggers lock-screen overlay.
2. AI interaction or game selection.
3. Successful completion awards screen-time and gamified rewards.
4. Active wallet decrements; re-lock occurs when wallet depleted.
5. Parent accesses analytics and settings via hidden, secure gesture.

---

## 8 Dependencies

* OpenAI Java SDK
* SQLCipher & Room for database encryption
* Jetpack Compose & MPAndroidChart for UI and analytics
* React & Vite for games
* Apache PDFBox for parental reports
* WorkManager for scheduled tasks
* **Service Layer**: Modular service interfaces (EconomyService, ExperienceService, BadgeService) with variant-specific implementations supporting local→remote service migration

---

## 9 Future-Proofing for Local AI Model

* Architect all AI interaction logic modularly to support future integration of a local AI model.
* Clearly defined placeholders and interfaces for easy future expansion.

---

## 10 Learning-as-a-Service Architecture

**Keep It Simple**: Build everything in the Android app first. Use clean interfaces so parts can be moved to a server later if needed.

### 10.1 Simple Service Contracts

```kotlin
interface LearningService {
    fun generateTask(childAge: Int, subject: String): Task
    fun processResponse(response: String): TaskResult
}

// Local implementation (build this first)
class LocalLearningService : LearningService { ... }

// Future remote implementation (someone else can build later)  
class RemoteLearningService : LearningService { ... }
```

### 10.2 What Stays Local vs Could Move Later

**Always Local**: UI, security, device permissions, parent dashboard
**Could Move Later**: AI processing, task generation, cross-user analytics
**Hybrid**: Local caching with optional remote sync

### 10.3 Implementation Strategy

1. **Build everything locally first** - get the app working
2. **Use clean interfaces** - make it easy to refactor later  
3. **Ship the product** - don't over-engineer
4. **Let future developers worry about servers** if the app succeeds

---

## 11 Compliance & Privacy Standards

* COPPA & GDPR-K compliance.
* No personalized ads.
* Auto-purging data older than one year.
* Include a clear privacy policy locally in assets.

---

## 12 Constraints & Mitigation Strategies

* Manual permission setup mitigated by clear onboarding instructions.
* Safe Mode and root bypass mitigated by rigorous security checks and PIN locking.

---

## 13 Build Instructions for Cursor AI

1. Scaffold basic Android app structure.
2. Implement encrypted database schemas.
3. Integrate OpenAI SDK.
4. Include React games in assets.
5. Implement fallback JSON tasks.
6. Set up security (PIN hashing, DB encryption).
7. Implement analytics visualization.
8. Setup optional telemetry and weekly PDF generation.
